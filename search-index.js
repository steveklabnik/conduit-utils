var searchIndex = {};
searchIndex['conduit_utils'] = {"items":[[0,"","conduit_utils","",null,null],[3,"HeaderMap","","",null,null],[6,"InHeader","","",null,null],[6,"OutHeader","","",null,null],[8,"RequestDelegator","","",null,null],[10,"request","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"request"}}],[10,"mut_request","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"request"}}],[11,"http_version","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"version"}}],[11,"conduit_version","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"version"}}],[11,"method","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"method"}}],[11,"scheme","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"scheme"}}],[11,"host","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"host"}}],[11,"virtual_root","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"option"}}],[11,"path","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"str"}}],[11,"query_string","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"option"}}],[11,"remote_addr","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"socketaddr"}}],[11,"content_length","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"option"}}],[11,"headers","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"headers"}}],[11,"body","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"read"}}],[11,"extensions","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"extensions"}}],[11,"mut_extensions","","",0,{"inputs":[{"name":"requestdelegator"}],"output":{"name":"extensions"}}],[11,"fmt","","",1,{"inputs":[{"name":"headermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"headermap"}],"output":{"name":"headermap"}}],[11,"eq","","",1,{"inputs":[{"name":"headermap"},{"name":"headermap"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"headermap"},{"name":"headermap"}],"output":{"name":"bool"}}],[11,"normalize","","",1,{"inputs":[{"name":"headermap"},{"name":"hashmap"}],"output":{"name":"headermap"}}],[11,"iter","","",1,{"inputs":[{"name":"headermap"}],"output":{"name":"map"}}],[11,"len","","",1,{"inputs":[{"name":"headermap"}],"output":{"name":"usize"}}],[11,"clear","","",1,{"inputs":[{"name":"headermap"}],"output":null}],[11,"find","","",1,{"inputs":[{"name":"headermap"},{"name":"str"}],"output":{"name":"option"}}],[11,"insert","","",1,{"inputs":[{"name":"headermap"},{"name":"str"},{"name":"vec"}],"output":{"name":"option"}}],[11,"remove","","",1,{"inputs":[{"name":"headermap"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_mut","","",1,{"inputs":[{"name":"headermap"},{"name":"str"}],"output":{"name":"option"}}]],"paths":[[8,"RequestDelegator"],[3,"HeaderMap"]]};
searchIndex['conduit'] = {"items":[[0,"","conduit","",null,null],[3,"TypeMap","","",null,null],[3,"Response","","",null,null],[12,"status","","The status code as a tuple of the return code and status string",0,null],[12,"headers","","A Map of the headers",0,null],[12,"body","","A Writer for body of the response",0,null],[4,"Scheme","","",null,null],[13,"Http","","",1,null],[13,"Https","","",1,null],[4,"Host","","",null,null],[13,"Name","","",2,null],[13,"Socket","","",2,null],[4,"Method","","",null,null],[13,"Get","","",3,null],[13,"Post","","",3,null],[13,"Put","","",3,null],[13,"Delete","","",3,null],[13,"Head","","",3,null],[13,"Connect","","",3,null],[13,"Options","","",3,null],[13,"Trace","","",3,null],[13,"Patch","","",3,null],[13,"Purge","","",3,null],[13,"Other","","",3,null],[11,"new","","",4,{"inputs":[{"name":"typemap"}],"output":{"name":"typemap"}}],[11,"find","","",4,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"find_mut","","",4,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[11,"insert","","",4,{"inputs":[{"name":"typemap"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","",4,{"inputs":[{"name":"typemap"}],"output":{"name":"bool"}}],[11,"contains","","",4,{"inputs":[{"name":"typemap"}],"output":{"name":"bool"}}],[11,"pop","","",4,{"inputs":[{"name":"typemap"}],"output":{"name":"option"}}],[6,"Extensions","","A Dictionary for extensions provided by the server or middleware",null,null],[8,"Request","","",null,null],[10,"http_version","","The version of HTTP being used",5,{"inputs":[{"name":"request"}],"output":{"name":"version"}}],[10,"conduit_version","","The version of the conduit spec being used",5,{"inputs":[{"name":"request"}],"output":{"name":"version"}}],[10,"method","","The request method, such as GET, POST, PUT, DELETE or PATCH",5,{"inputs":[{"name":"request"}],"output":{"name":"method"}}],[10,"scheme","","The scheme part of the request URL",5,{"inputs":[{"name":"request"}],"output":{"name":"scheme"}}],[10,"host","","The host part of the requested URL",5,{"inputs":[{"name":"request"}],"output":{"name":"host"}}],[10,"virtual_root","","The initial part of the request URL's path that corresponds\nto a virtual root. This allows an application to have a\nvirtual location that consumes part of the path.",5,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[10,"path","","The remainder of the path.",5,{"inputs":[{"name":"request"}],"output":{"name":"str"}}],[10,"query_string","","The portion of the request URL that follows the \"?\"",5,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[10,"remote_addr","","The remote IP address of the client or the last proxy that\nsent the request.",5,{"inputs":[{"name":"request"}],"output":{"name":"socketaddr"}}],[10,"content_length","","The byte-size of the body, if any",5,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[10,"headers","","The request's headers, as conduit::Headers.",5,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[10,"body","","A Reader for the body of the request",5,{"inputs":[{"name":"request"}],"output":{"name":"read"}}],[10,"extensions","","A readable map of extensions",5,{"inputs":[{"name":"request"}],"output":{"name":"extensions"}}],[10,"mut_extensions","","A mutable map of extensions",5,{"inputs":[{"name":"request"}],"output":{"name":"extensions"}}],[8,"Headers","","",null,null],[10,"find","","Find the value of a given header. Multi-line headers are represented\nas an array.",6,{"inputs":[{"name":"headers"},{"name":"str"}],"output":{"name":"option"}}],[10,"has","","Returns true if a particular header exists",6,{"inputs":[{"name":"headers"},{"name":"str"}],"output":{"name":"bool"}}],[10,"all","","Iterate over all of the available headers.",6,{"inputs":[{"name":"headers"}],"output":{"name":"vec"}}],[8,"Handler","","A Handler takes a request and returns a response or an error.\nBy default, a bare function implements `Handler`.",null,null],[10,"call","","",7,{"inputs":[{"name":"handler"},{"name":"request"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"scheme"}],"output":{"name":"scheme"}}],[11,"fmt","","",1,{"inputs":[{"name":"scheme"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"scheme"},{"name":"scheme"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"scheme"},{"name":"scheme"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"fmt","","",3,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}]],"paths":[[3,"Response"],[4,"Scheme"],[4,"Host"],[4,"Method"],[3,"TypeMap"],[8,"Request"],[8,"Headers"],[8,"Handler"]]};
searchIndex['semver'] = {"items":[[0,"","semver","Semantic version parsing and comparison.",null,null],[3,"Version","","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version\nnumbers. Matching operations can then be done with the `VersionReq` against a particular\nversion to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that's solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"ParseError","","A `ParseError` is returned as the `Err` side of a `Result` when a version is attempted\nto be parsed.",null,null],[13,"NonAsciiIdentifier","","All identifiers must be ASCII.",2,null],[13,"IncorrectParse","","The version was mis-parsed.",2,null],[13,"GenericFailure","","Any other failure.",2,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each\nenumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,null],[13,"InvalidSigil","","The sigil you have written is not correct.",3,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,null],[13,"MajorVersionRequired","","At least a major version is required.",3,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,null],[11,"fmt","","",1,{"inputs":[{"name":"identifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"identifier"}],"output":{"name":"identifier"}}],[11,"fmt","","",1,{"inputs":[{"name":"identifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"parse","","Parse a string into a semver object.",0,{"inputs":[{"name":"version"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"version"},{"name":"h"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"versionreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"versionreq"}],"output":{"name":"versionreq"}}],[11,"eq","","",4,{"inputs":[{"name":"versionreq"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"versionreq"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"reqparseerror"},{"name":"reqparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"reqparseerror"},{"name":"reqparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"reqparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"reqparseerror"}],"output":{"name":"reqparseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"reqparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"reqparseerror"}],"output":{"name":"str"}}],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other\nwords, any version will match against it.",4,{"inputs":[{"name":"versionreq"}],"output":{"name":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `\"^1.2.3\"`\nand turns it into a `VersionReq` that matches that particular constraint.",4,{"inputs":[{"name":"versionreq"},{"name":"str"}],"output":{"name":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,{"inputs":[{"name":"versionreq"},{"name":"version"}],"output":{"name":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,{"inputs":[{"name":"versionreq"},{"name":"version"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"versionreq"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Version"],[4,"Identifier"],[4,"ParseError"],[4,"ReqParseError"],[3,"VersionReq"]]};
initSearch(searchIndex);
